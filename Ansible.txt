To install ansible on amazonlinux
-----------------------------------
amazon-linux-extras install ansible2 -y
yum install python-pip -y

Create a user on master and slave instance: sudo adduser username
set password for the users: sudo passwd username 
add users to the sudoers file: sudo nano /etc/sudoers

enable password authentication for user on each instance
-------------------------------------------------------
PasswordAuthentication: yes
path:/etc/ssh/sshd_config 
restart: systemctl restart sshd

GENERATE A KEY IN  ANSIBLE USER ON MASTER SERVER (ssh-keygen)
It will generate 2 keys (public & private)
COPY THE PUBLIC KEY TO ALL SLAVE SERVERS (ssh-copy-id root@slave_ip)

Ansible Configurations:
----------------------
 ENABLE ANSIBLE INVENTORY AND SUDO USER (nano /etc/ansible/ansible.cfg)
 If file doesn't exist create it add the below things:

 [defaults]

 #some basic default values 
 inventory       = /etc/ansible/hosts
 #library        = /usr/share/my_module
 #module_utils   = /usr/share/my_module
 #remote_tmp     = ~/.ansible/tmp
 #local_tmp      = ~/.ansible/tmp
 #plugin_filters_cfg = /etc/ansible/plugins
 #forks          = 5
 #poll_interval  = 15
 sudo_user       = root
 #ask_sudo_pass  = True
 #ask_pass       = True
 #transport      = smart
 #remote_port    = 22
 #module_lang    = c
 #module_set_locale = False

save and exit

ADD INVENTORIES (nano /etc/ansible/hosts)
-----------------------------------------
#A collection of servers connected to ansible control-node
[all]
50.17.36.133 ansible_user=user1

save and exit

TO CHECK WITH SLAVE SERVER CONNECTION
-------------------------------------
-->To see the list of hosts in inventory: ansible all --list-hosts
-->To see the list of particular group hosts in inventory : ansible group_name --list-hosts
-->To see the 1st hosts in inventory : ansible all[0] --list-hosts
-->To check the network connection between master & slave : ansible all -m ping


Ansible Inventory
-----------------
The inventory file in Ansible is where you define the hosts and groups of hosts that Ansible will manage. 
It tells Ansible which systems to connect to and provides variables and configuration for those systems.

example:
[all]
server1 ansible_host=192.168.1.10 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
server2 ansible_host=192.168.1.11 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

If we need customized inventory we can create a inventory file in a current directory of a project.
file structure:
 Project:
  |_ansible-playbooks
      |_inventory.ini
      |_play.yml

Ansible commands to run yml files:
-->to run playbook file: ansible-playbook file.yml 
-->to run with specific inventory file: ansible-playbook -i inventory.ini file.yml
-->to run by prompting password for host: ansible-playbook file.yml --ask-become-pass

TO store password of slave machine in inventory file:
-----------------------------------------------------
[all]
slave-1 ansible_host=54.147.178.56  ansible_user=user1 ansible_become_pass=user1
slave-2 ansible_host=54.167.117.147 ansible_user=user2 ansible_become_pass=user2

cmd:
to run playbook on any specific slave belong to same group: ansible-playbook playbook.yml --ask-become-pass --limit slave-1

Ansible Playbooks:
-----------------

Ansible playbook to install httpd server:

---
- name: Setup HTTPD server on multiple machines
  hosts: dev
  become: yes
  tasks:
    # Install HTTPD package
    - name: Install HTTPD
      yum:
        name: httpd
        state: present

    # Start and enable the HTTPD service
    - name: Start and enable HTTPD service
      service:
        name: httpd
        state: started
        enabled: yes


note:[the --- is called a YAML document separator.]

To stop and uninstall httpd on slave machine:
---------------------------------------------
---
- name: Uninstall HTTPD server from multiple machines
  hosts: all
  become: yes
  tasks:
    - name: Remove HTTPD package
      yum:
        name: httpd
        state: absent

    - name: Remove leftover configuration files
      file:
        path: /etc/httpd
        state: absent

    - name: Ensure HTTPD service is stopped and disabled
      service:
        name: httpd
        state: stopped
        enabled: no
      ignore_errors: yes




Ansible Playbook to install git, java and maven
-----------------------------------------------
---
- name: Install Git, Java, and Maven on Amazon Linux
  hosts: all
  become: yes
  tasks:
    - name: Update the package repository
      ansible.builtin.yum:
        name: "*"
        state: latest

    - name: Install Git
      ansible.builtin.yum:
        name: git
        state: present

    - name: Install Java (OpenJDK 17)
      ansible.builtin.yum:
        name: java-17
        state: present

    - name: Install Maven
      ansible.builtin.yum:
        name: maven
        state: present

    - name: Verify installations
      ansible.builtin.shell: |
        echo "Git Version: $(git --version)"
        echo "Java Version: $(java -- version)"
        echo "Maven Version: $(mvn --version)"

WRITE A PLAYBOOK WITH VARIABLE:
-------------------------------
-->to store single variable:

---
- name: installing git on slave server
  hosts: all
  connection: ssh
  become: yes

  vars:
    abc: git
  tasks:
    - name: install git
      action: yum name={{abc}} state=present

-->to store multiple variable

---
- name: installing git on slave server
  hosts: all
  connection: ssh
  become: yes

  vars:
    abc: git
    xyz: maven
  
  tasks:
    - name: install git
      action: yum name={{abc}} state=present
  tasks:
    - name: install maven
      action: yum name={{xyz}} state=present

TO ADD VARIABLES DYNAMICALLY:
-----------------------------
-->single variable

---
- name: installing git on slave server
  hosts: all
  connection: ssh
  become: yes
  
  tasks:
    - name: install git
      action: yum name={{abc}} state=present


cmd: ansible-playbook file.yml --extra-vars "abc=git"

--> multiple variables

---
- name: installing git on slave server
  hosts: all
  connection: ssh
  become: yes

  tasks:
    - name: install git
      action: yum name={{abc}} state=present
  tasks:
    - name: install maven
      action: yum name={{xyz}} state=present

cmd: ansible-playbook file.yml --extras-vars "abc=git xyz=maven"

 
WRITE A PLAYBOOK TO INSTALL PACKAGES ON DIFFERENT WAYS:
-------------------------------------------------------
---
- name: install java on slave machines
  hosts: prod
  connection: ssh
  become: yes
  
  tasks:
    - name: install java
      yum : name=java-17 state=present 
  
    - name: install java
      action: yum name=java-17 state=present

    - name: install java
      command: yum install java-17 -y
      
WRITE A PLAYBOOK TO CREATE A FILE AND DIRECTORY
----------------------------------------------
---
- hosts: dev
  connection: ssh
  become: yes
  tasks:
     - name: create a file
       file:
        path: "demo.txt"
        state: touch
     - name: create a directory
       file:
        path: "ansible"
        state: directory

WRITE A PLAYBOOK FOR ENTERING  A DATA IN A FILE:
------------------------------------------------
---
- hosts: all
  become: yes
  tasks:
   - name: inserting data in a file
     copy:
      dest: file.txt
      content: |
         hi good morning all
         welcome to ansible session.

WRITE A PLAYBOOK TO CHANGE THE PERMISSIONS OF A FILE:
-----------------------------------------------------
---
- hosts: dev
  connection: ssh
  become: yes
  tasks:
     - name: create a file
       file:
         path: "demo.txt"
         state: touch
         mode: 777

WRITE A PLAYBOOK TO DEPLOY A WEBSITE:
-------------------------------------
---
- name: Setup HTTPD server on multiple machines
  hosts: dev
  become: yes
  tasks:
    # Install HTTPD package
    - name: Install HTTPD
      yum:
        name: httpd
        state: present

    # Start and enable the HTTPD service
    - name: Start and enable HTTPD service
      service:
        name: httpd
        state: started
        enabled: yes
    - name: create a file
      file:
        path: "/var/www/html/index.html"
        state: touch
        mode: 777
    - name: inserting data in a file
      copy:
       dest: file.txt
       content: |
         <h1>this is my web application, I have deployed using ansible</h1>

TO SETUP JENKINS ON AMAZON LINUX:
---------------------------------
---
- name: Setup Jenkins on Amazon Linux
  hosts: all
  become: yes

  vars:
    jenkins_repo_url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
    jenkins_repo_key_url: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
    java_package: java-17

  tasks:
    - name: Update all packages
      yum:
        name: "*"
        state: latest

    - name: Install Java
      yum:
        name: "{{ java_package }}"
        state: present

    - name: Add Jenkins repository
      command: >
        curl --silent --location "{{ jenkins_repo_url }}"
        -o /etc/yum.repos.d/jenkins.repo
      args:
        creates: /etc/yum.repos.d/jenkins.repo

    - name: Import Jenkins GPG key
      ansible.builtin.rpm_key:
       state: present
       key: "{{ jenkins_repo_key_url }}"
    - name: Install Jenkins
      yum:
        name: jenkins
        state: present

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: read file
      slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
      register: file_content

    - name: Display Jenkins initial admin password
      debug:
        msg: "{{ file_content.content | b64decode }}"

ANSIBLE-PLAYBOOK FOR USER AND GROUP MANAGEMENT:
-----------------------------------------------
---
- name: User and Group Management
  hosts: all
  become: yes  # Run tasks with elevated privileges
  vars:
    user_name: "john"
    user_password: "{{ 'password123' | password_hash('sha512') }}"  # Encrypted password
    group_name: "devops"
  tasks:
    - name: Ensure the group exists
      group:
        name: "{{ group_name }}"
        state: present
    - name: Create the user and set the password
      user:
        name: "{{ user_name }}"
        password: "{{ user_password }}"
        groups: "{{ group_name }}"
        shell: "/bin/bash"
        create_home: yes
        state: present

ANSIBLE-PLAYBOOK TO CREATE MULTIPLE USERS AND MULTIPLE GROUPS AND USERS TO A GROUP:
-----------------------------------------------------------------------------------
---
- name: Manage multiple users and groups
  hosts: all
  become: yes  # Run tasks as root

  vars:
    users:
      - name: alpha
        password: "{{ 'alphapassword' | password_hash('sha512') }}"
        groups: "developers"

      - name: beta
        password: "{{ 'betapassword' | password_hash('sha512') }}"
        groups: "developers,devops"

      - name: charlie
        password: "{{ 'charliepassword' | password_hash('sha512') }}"
        groups: "testers"

    groups:
      - developers
      - testers
      - devops

  tasks:
    - name: Ensure groups exist
      group:
        name: "{{ item }}"
        state: present
      with_items: "{{ groups }}"

    - name: Create users and add them to groups
      user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        groups: "{{ item.groups }}"
        shell: "/bin/bash"
        create_home: yes
        state: present
      with_items: "{{ users }}"

To create a multiple groups the groups name should be added in the inventory file
example:
[all]
slave-1 ansible_host=59.223.12.1 ansible_user=user1 ansible_become_pass=user1
slave-2 ansible_host=192.168.12.0 ansible_user=user1 ansible_become_pass=user2
[developers]
slave-1
[testers]
slave-1
[devops]
slave-1

ANSIBLE_PLAYBOOK TO COPY FILES FROM MASTER TO SLAVE
--------------------------------------------------
---
- hosts: all
  become: yes
  connection: ssh
  tasks:
    - name: copy files from src to destination
      copy:
        src: sample.yml
        dest: sample.yml

ANSIBLE PLAYBOOK TO COPY THE FILES FROM ONE LOCATION TO ANOTHER ON SLAVE
-----------------------------------------------------------------------
---
- name: Copy files from one location to another on slave
  hosts: slave
  become: yes  # Run as root (if needed)
  tasks:
    - name: Copy file from source to destination
      copy:
        src: /path/to/source/file.txt
        dest: /path/to/destination/file.txt
        owner: root
        group: root
        mode: '0644'  # Permissions for the copied file

ANSIBLE PLAYBOOK TO COPY DIRECTORIES RECURSIVELY
-----------------------------------------------
    - name: Copy directory recursively
      copy:
        src: /path/to/source/directory/
        dest: /path/to/destination/directory/
        owner: root
        group: root
        mode: '0755'
        recurse: yes  # This ensures all contents are copied

